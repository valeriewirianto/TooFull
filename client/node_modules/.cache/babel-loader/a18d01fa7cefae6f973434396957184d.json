{"ast":null,"code":"// environment configutations\nimport ENV from'./../config.js';var API_HOST=ENV.api_host;// console.log('Current environment:', ENV.env)\n// Send a request to check if a user is logged in through the session cookie\nexport var checkSession=function checkSession(app){var url=\"\".concat(API_HOST,\"/users/check-sessison\");var request=new Request(url,{method:\"get\",credentials:'include'});if(!ENV.use_frontend_test_user){fetch(url,{method:\"GET\",credentials:'include'}).then(function(res){if(res.status===200){return res.json();}}).then(function(json){if(!json||!json.currentUser){app.setState({currentUser:null});}if(json&&json.currentUser){app.setState({currentUser:json.currentUser});}}).catch(function(error){console.log(error);});}else{app.setState({currentUser:ENV.user});}};// A function to send a POST request with the user to be logged in\nexport var login=function login(loginComp,app){// Create our request constructor with all the parameters we need\nvar request=new Request(\"\".concat(API_HOST,\"/users/login\"),{method:\"post\",body:JSON.stringify(loginComp.state),headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}});// Send the request with fetch()\nfetch(request).then(function(res){if(res.status===200){return res.json();}}).then(function(json){if(json.currentUser!==undefined){app.setState({currentUser:json.currentUser});}}).catch(function(error){console.log(error);});};","map":{"version":3,"sources":["/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/session.js"],"names":["ENV","API_HOST","api_host","checkSession","app","url","request","Request","method","credentials","use_frontend_test_user","fetch","then","res","status","json","currentUser","setState","catch","error","console","log","user","login","loginComp","body","JSON","stringify","state","headers","Accept","undefined"],"mappings":"AAAA;AACA,MAAOA,CAAAA,GAAP,KAAgB,gBAAhB,CACA,GAAMC,CAAAA,QAAQ,CAAGD,GAAG,CAACE,QAArB,CACA;AAEA;AACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,GAAD,CAAS,CACjC,GAAMC,CAAAA,GAAG,WAAMJ,QAAN,yBAAT,CACA,GAAMK,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,CAAYF,GAAZ,CAAiB,CAC7BG,MAAM,CAAE,KADqB,CAE7BC,WAAW,CAAE,SAFgB,CAAjB,CAAhB,CAKA,GAAI,CAACT,GAAG,CAACU,sBAAT,CAAiC,CAC7BC,KAAK,CAACN,GAAD,CAAM,CAACG,MAAM,CAAE,KAAT,CACXC,WAAW,CAAE,SADF,CAAN,CAAL,CAECG,IAFD,CAEM,SAAAC,GAAG,CAAI,CACT,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpB,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACH,CACJ,CAND,EAOCH,IAPD,CAOM,SAAAG,IAAI,CAAI,CACV,GAAG,CAACA,IAAD,EAAS,CAACA,IAAI,CAACC,WAAlB,CAA8B,CAC1BZ,GAAG,CAACa,QAAJ,CAAa,CAAED,WAAW,CAAE,IAAf,CAAb,EACH,CACD,GAAID,IAAI,EAAIA,IAAI,CAACC,WAAjB,CAA8B,CAC1BZ,GAAG,CAACa,QAAJ,CAAa,CAAED,WAAW,CAAED,IAAI,CAACC,WAApB,CAAb,EACH,CACJ,CAdD,EAeCE,KAfD,CAeO,SAAAC,KAAK,CAAI,CACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACH,CAjBD,EAkBH,CAnBD,IAmBO,CACHf,GAAG,CAACa,QAAJ,CAAa,CAAED,WAAW,CAAEhB,GAAG,CAACsB,IAAnB,CAAb,EACH,CAEJ,CA9BM,CAgCP;AACA,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,SAAD,CAAYpB,GAAZ,CAAoB,CACrC;AACA,GAAME,CAAAA,OAAO,CAAG,GAAIC,CAAAA,OAAJ,WAAeN,QAAf,iBAAuC,CACnDO,MAAM,CAAE,MAD2C,CAEnDiB,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeH,SAAS,CAACI,KAAzB,CAF6C,CAGnDC,OAAO,CAAE,CACLC,MAAM,CAAE,mCADH,CAEL,eAAgB,kBAFX,CAH0C,CAAvC,CAAhB,CASA;AACAnB,KAAK,CAACL,OAAD,CAAL,CACKM,IADL,CACU,SAAAC,GAAG,CAAI,CACT,GAAIA,GAAG,CAACC,MAAJ,GAAe,GAAnB,CAAwB,CACpB,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACH,CACJ,CALL,EAMKH,IANL,CAMU,SAAAG,IAAI,CAAI,CACV,GAAIA,IAAI,CAACC,WAAL,GAAqBe,SAAzB,CAAoC,CAChC3B,GAAG,CAACa,QAAJ,CAAa,CAAED,WAAW,CAAED,IAAI,CAACC,WAApB,CAAb,EACH,CACJ,CAVL,EAWKE,KAXL,CAWW,SAAAC,KAAK,CAAI,CACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACH,CAbL,EAcH,CA1BM","sourcesContent":["// environment configutations\nimport ENV from './../config.js'\nconst API_HOST = ENV.api_host\n// console.log('Current environment:', ENV.env)\n\n// Send a request to check if a user is logged in through the session cookie\nexport const checkSession = (app) => {\n    const url = `${API_HOST}/users/check-sessison`;\n    const request = new Request(url, {\n        method: \"get\",\n        credentials: 'include'\n    });\n\n    if (!ENV.use_frontend_test_user) {\n        fetch(url, {method: \"GET\",\n        credentials: 'include'})\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if(!json || !json.currentUser){\n                app.setState({ currentUser: null});\n            }\n            if (json && json.currentUser) {\n                app.setState({ currentUser: json.currentUser });\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    } else {\n        app.setState({ currentUser: ENV.user });\n    }\n    \n};\n\n// A function to send a POST request with the user to be logged in\nexport const login = (loginComp, app) => {\n    // Create our request constructor with all the parameters we need\n    const request = new Request(`${API_HOST}/users/login`, {\n        method: \"post\",\n        body: JSON.stringify(loginComp.state),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    // Send the request with fetch()\n    fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            if (json.currentUser !== undefined) {\n                app.setState({ currentUser: json.currentUser });\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};"]},"metadata":{},"sourceType":"module"}