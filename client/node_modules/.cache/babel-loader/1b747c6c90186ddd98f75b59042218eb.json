{"ast":null,"code":"import ENV from './../config.js';\nconst API_HOST = ENV.api_host; // Get all list ids and names of currently logged in user\n\nexport const get_all_lists = app => {\n  const url = `${API_HOST}/get_all_lists`;\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    app.setState({\n      lists: json\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; // Post a new list of the current user to the DB\n\nexport const create_list = (appList, listName, category, listDescription, permissions) => {\n  const request = new Request(`${API_HOST}/create_list`, {\n    method: \"post\",\n    body: JSON.stringify({\n      \"listName\": listName,\n      \"category\": category,\n      \"listDescription\": listDescription,\n      \"permissions\": permissions\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    const newList = appList.state.lists.push({\n      \"id\": json._id,\n      \"listName\": json.listName\n    });\n    appList.setState({\n      list: newList\n    });\n    return \"success\";\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const get_all_items = (app, listId) => {\n  const url = `${API_HOST}/get_a_list/` + listId;\n  fetch(url).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    app.setState({\n      ListName: json.listName,\n      ListDescription: json.listDescription,\n      Category: json.category,\n      FoodRank: json.items\n    });\n  }).catch(error => {\n    console.log(error);\n  });\n}; // adds a new item to a list, does not update ranks of other items\n\nexport const add_item = (app, popUpState, listId) => {\n  const url = `${API_HOST}/add_item/` + listId;\n  const request = new Request(url, {\n    method: \"post\",\n    body: JSON.stringify({\n      \"rank\": popUpState.rank,\n      \"foodName\": popUpState.foodName,\n      \"notes\": popUpState.notes\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    app.setState({\n      FoodRank: json.items.sort(function (a, b) {\n        return a.rank - b.rank;\n      })\n    });\n    return \"success\";\n  }).catch(error => {\n    console.log(error);\n  });\n}; // modify multiple items in a list, used for when an item is added and ranks of other items must be modified\n\nexport const modify_multiple_items = (app, newItemList, listId) => {\n  const url = `${API_HOST}/modify_item/` + listId;\n  console.log(url);\n  console.log(newItemList);\n  let newList;\n  newItemList.map(item => {\n    console.log(item._id);\n    const request = new Request(url, {\n      method: \"post\",\n      body: JSON.stringify({\n        \"rank\": item.rank,\n        \"foodName\": item.foodName,\n        \"notes\": item.notes,\n        \"item_id\": item._id\n      }),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    fetch(request).then(res => {\n      if (res.status === 200) {\n        return res.json();\n      }\n    }).then(json => {\n      console.log(json.items);\n      newList = json.items; // app.setState({\n      //     FoodRank: newList\n      // })\n    }).catch(error => {\n      console.log(error);\n    });\n  });\n};\nexport const delete_list = listId => {\n  const request = new Request(`${API_HOST}/delete_list/` + listId, {\n    method: \"delete\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    return \"success\";\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const update_list_description = (listId, newDescription) => {\n  const request = new Request(`${API_HOST}/edit_description/` + listId, {\n    method: \"post\",\n    body: JSON.stringify({\n      listDescription: newDescription\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    return \"success\";\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const delete_item = (listId, itemId) => {\n  const request = new Request(`${API_HOST}/delete_item/` + listId + '/' + itemId, {\n    method: \"delete\",\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    return \"success\";\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const edit_item = (listId, itemId, newName, newDescription) => {\n  const request = new Request(`${API_HOST}/modify_item/` + listId + '/' + itemId, {\n    method: \"post\",\n    body: JSON.stringify({\n      foodName: newName,\n      notes: newDescription\n    }),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return fetch(request).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  }).then(json => {\n    return \"success\";\n  }).catch(error => {\n    console.log(error);\n  });\n};","map":{"version":3,"sources":["/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/myList.js"],"names":["ENV","API_HOST","api_host","get_all_lists","app","url","fetch","then","res","status","json","setState","lists","catch","error","console","log","create_list","appList","listName","category","listDescription","permissions","request","Request","method","body","JSON","stringify","headers","Accept","newList","state","push","_id","list","get_all_items","listId","ListName","ListDescription","Category","FoodRank","items","add_item","popUpState","rank","foodName","notes","sort","a","b","modify_multiple_items","newItemList","map","item","delete_list","update_list_description","newDescription","delete_item","itemId","edit_item","newName"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,gBAAhB;AACA,MAAMC,QAAQ,GAAGD,GAAG,CAACE,QAArB,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAGC,GAAD,IAAS;AACjC,QAAMC,GAAG,GAAI,GAAEJ,QAAS,gBAAxB;AACAK,EAAAA,KAAK,CAACD,GAAD,CAAL,CACKE,IADL,CACUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;AACJ,GALL,EAMKH,IANL,CAMUG,IAAI,IAAG;AACTN,IAAAA,GAAG,CAACO,QAAJ,CAAa;AAACC,MAAAA,KAAK,EAAEF;AAAR,KAAb;AACH,GARL,EASKG,KATL,CASWC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAXL;AAYH,CAdM,C,CAgBP;;AACA,OAAO,MAAMG,WAAW,GAAG,CAACC,OAAD,EAAUC,QAAV,EAAoBC,QAApB,EAA8BC,eAA9B,EAA+CC,WAA/C,KAA+D;AACtF,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAa,GAAEvB,QAAS,cAAxB,EAAuC;AACnDwB,IAAAA,MAAM,EAAE,MAD2C;AAEnDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,kBAAYT,QAAb;AACrB,kBAAYC,QADS;AAErB,yBAAmBC,eAFE;AAGrB,qBAAeC;AAHM,KAAf,CAF6C;AAOnDO,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,mCADH;AAEL,sBAAgB;AAFX;AAP0C,GAAvC,CAAhB;AAaA,SAAOxB,KAAK,CAACiB,OAAD,CAAL,CACFhB,IADE,CACGC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;AACJ,GALE,EAMFH,IANE,CAMGG,IAAI,IAAI;AACV,UAAMqB,OAAO,GAAGb,OAAO,CAACc,KAAR,CAAcpB,KAAd,CAAoBqB,IAApB,CAAyB;AAAC,YAAMvB,IAAI,CAACwB,GAAZ;AAAiB,kBAAYxB,IAAI,CAACS;AAAlC,KAAzB,CAAhB;AACAD,IAAAA,OAAO,CAACP,QAAR,CAAiB;AACbwB,MAAAA,IAAI,EAAEJ;AADO,KAAjB;AAGA,WAAO,SAAP;AACH,GAZE,EAaFlB,KAbE,CAaIC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAfE,CAAP;AAgBH,CA9BM;AAgCP,OAAO,MAAMsB,aAAa,GAAG,CAAChC,GAAD,EAAMiC,MAAN,KAAiB;AAC1C,QAAMhC,GAAG,GAAI,GAAEJ,QAAS,cAAZ,GAA6BoC,MAAzC;AACA/B,EAAAA,KAAK,CAACD,GAAD,CAAL,CACKE,IADL,CACUC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;AACJ,GALL,EAMKH,IANL,CAMUG,IAAI,IAAG;AACTN,IAAAA,GAAG,CAACO,QAAJ,CAAa;AAAE2B,MAAAA,QAAQ,EAAE5B,IAAI,CAACS,QAAjB;AAA2BoB,MAAAA,eAAe,EAAE7B,IAAI,CAACW,eAAjD;AAAkEmB,MAAAA,QAAQ,EAAE9B,IAAI,CAACU,QAAjF;AAA2FqB,MAAAA,QAAQ,EAAE/B,IAAI,CAACgC;AAA1G,KAAb;AACH,GARL,EASK7B,KATL,CASWC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAXL;AAYH,CAdM,C,CAgBP;;AACA,OAAO,MAAM6B,QAAQ,GAAG,CAACvC,GAAD,EAAMwC,UAAN,EAAkBP,MAAlB,KAA6B;AACjD,QAAMhC,GAAG,GAAI,GAAEJ,QAAS,YAAZ,GAA0BoC,MAAtC;AAEA,QAAMd,OAAO,GAAG,IAAIC,OAAJ,CAAYnB,GAAZ,EAAiB;AAC7BoB,IAAAA,MAAM,EAAE,MADqB;AAE7BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,cAAQgB,UAAU,CAACC,IADF;AAEjB,kBAAYD,UAAU,CAACE,QAFN;AAGjB,eAASF,UAAU,CAACG;AAHH,KAAf,CAFuB;AAO7BlB,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,mCADH;AAEL,sBAAgB;AAFX;AAPoB,GAAjB,CAAhB;AAaA,SAAOxB,KAAK,CAACiB,OAAD,CAAL,CACNhB,IADM,CACDC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;AACJ,GALM,EAMNH,IANM,CAMDG,IAAI,IAAI;AACJN,IAAAA,GAAG,CAACO,QAAJ,CAAa;AACb8B,MAAAA,QAAQ,EAAE/B,IAAI,CAACgC,KAAL,CAAWM,IAAX,CAAgB,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAAC,eAAOD,CAAC,CAACJ,IAAF,GAAOK,CAAC,CAACL,IAAhB;AAAqB,OAApD;AADG,KAAb;AAGN,WAAO,SAAP;AACH,GAXM,EAYNhC,KAZM,CAYAC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAdM,CAAP;AAeH,CA/BM,C,CAkCP;;AACA,OAAO,MAAMqC,qBAAqB,GAAG,CAAC/C,GAAD,EAAMgD,WAAN,EAAmBf,MAAnB,KAA8B;AAC/D,QAAMhC,GAAG,GAAI,GAAEJ,QAAS,eAAZ,GAA6BoC,MAAzC;AACAtB,EAAAA,OAAO,CAACC,GAAR,CAAYX,GAAZ;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYoC,WAAZ;AAEA,MAAIrB,OAAJ;AAEAqB,EAAAA,WAAW,CAACC,GAAZ,CAAgBC,IAAI,IAAI;AACpBvC,IAAAA,OAAO,CAACC,GAAR,CAAYsC,IAAI,CAACpB,GAAjB;AACI,UAAMX,OAAO,GAAG,IAAIC,OAAJ,CAAYnB,GAAZ,EAAiB;AAC7BoB,MAAAA,MAAM,EAAE,MADqB;AAE7BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,gBAAQ0B,IAAI,CAACT,IADI;AAEjB,oBAAYS,IAAI,CAACR,QAFA;AAGjB,iBAASQ,IAAI,CAACP,KAHG;AAIjB,mBAAWO,IAAI,CAACpB;AAJC,OAAf,CAFuB;AAQ7BL,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,mCADH;AAEL,wBAAgB;AAFX;AARoB,KAAjB,CAAhB;AAcAxB,IAAAA,KAAK,CAACiB,OAAD,CAAL,CACChB,IADD,CACMC,GAAG,IAAI;AACT,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACnB,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACJ;AACJ,KALD,EAMCH,IAND,CAMMG,IAAI,IAAI;AACVK,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACgC,KAAjB;AACAX,MAAAA,OAAO,GAAGrB,IAAI,CAACgC,KAAf,CAFU,CAGV;AACA;AACA;AACH,KAZD,EAaC7B,KAbD,CAaOC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAfD;AAiBP,GAjCD;AAkCH,CAzCM;AA2CP,OAAO,MAAMyC,WAAW,GAAIlB,MAAD,IAAY;AACnC,QAAMd,OAAO,GAAG,IAAIC,OAAJ,CAAa,GAAEvB,QAAS,eAAZ,GAA6BoC,MAAzC,EAAiD;AAC7DZ,IAAAA,MAAM,EAAE,QADqD;AAE7DI,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,mCADH;AAEL,sBAAgB;AAFX;AAFoD,GAAjD,CAAhB;AAQA,SAAOxB,KAAK,CAACiB,OAAD,CAAL,CACFhB,IADE,CACGC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;AACJ,GALE,EAMFH,IANE,CAMGG,IAAI,IAAI;AAEV,WAAO,SAAP;AACH,GATE,EAUFG,KAVE,CAUIC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAZE,CAAP;AAaH,CAtBM;AAwBP,OAAO,MAAM0C,uBAAuB,GAAG,CAACnB,MAAD,EAASoB,cAAT,KAA4B;AAC/D,QAAMlC,OAAO,GAAG,IAAIC,OAAJ,CAAa,GAAEvB,QAAS,oBAAZ,GAAkCoC,MAA9C,EAAsD;AAClEZ,IAAAA,MAAM,EAAE,MAD0D;AAElEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,eAAe,EAAEoC;AAAnB,KAAf,CAF4D;AAGlE5B,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,mCADH;AAEL,sBAAgB;AAFX;AAHyD,GAAtD,CAAhB;AASA,SAAOxB,KAAK,CAACiB,OAAD,CAAL,CACFhB,IADE,CACGC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;AACJ,GALE,EAMFH,IANE,CAMGG,IAAI,IAAI;AAEV,WAAO,SAAP;AACH,GATE,EAUFG,KAVE,CAUIC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAZE,CAAP;AAaH,CAvBM;AAyBP,OAAO,MAAM4C,WAAW,GAAG,CAACrB,MAAD,EAASsB,MAAT,KAAoB;AAC3C,QAAMpC,OAAO,GAAG,IAAIC,OAAJ,CAAa,GAAEvB,QAAS,eAAZ,GAA6BoC,MAA7B,GAAsC,GAAtC,GAA4CsB,MAAxD,EAAgE;AAC5ElC,IAAAA,MAAM,EAAE,QADoE;AAE5EI,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,mCADH;AAEL,sBAAgB;AAFX;AAFmE,GAAhE,CAAhB;AAOA,SAAOxB,KAAK,CAACiB,OAAD,CAAL,CACFhB,IADE,CACGC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;AACJ,GALE,EAMFH,IANE,CAMGG,IAAI,IAAI;AACV,WAAO,SAAP;AACH,GARE,EASFG,KATE,CASIC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAXE,CAAP;AAYH,CApBM;AAsBP,OAAO,MAAM8C,SAAS,GAAG,CAACvB,MAAD,EAASsB,MAAT,EAAiBE,OAAjB,EAA0BJ,cAA1B,KAA6C;AAClE,QAAMlC,OAAO,GAAG,IAAIC,OAAJ,CAAa,GAAEvB,QAAS,eAAZ,GAA6BoC,MAA7B,GAAsC,GAAtC,GAA4CsB,MAAxD,EAAgE;AAC5ElC,IAAAA,MAAM,EAAE,MADoE;AAE5EC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEkB,MAAAA,QAAQ,EAAEe,OAAZ;AAAqBd,MAAAA,KAAK,EAAEU;AAA5B,KAAf,CAFsE;AAG5E5B,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,mCADH;AAEL,sBAAgB;AAFX;AAHmE,GAAhE,CAAhB;AASA,SAAOxB,KAAK,CAACiB,OAAD,CAAL,CACFhB,IADE,CACGC,GAAG,IAAI;AACT,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;AACJ,GALE,EAMFH,IANE,CAMGG,IAAI,IAAI;AAEV,WAAO,SAAP;AACH,GATE,EAUFG,KAVE,CAUIC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAZE,CAAP;AAaH,CAvBM","sourcesContent":["import ENV from './../config.js'\nconst API_HOST = ENV.api_host\n\n// Get all list ids and names of currently logged in user\nexport const get_all_lists= (app) => {\n    const url = `${API_HOST}/get_all_lists`;\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json()\n            }\n        })\n        .then(json =>{\n            app.setState({lists: json})\n        })\n        .catch(error => {\n            console.log(error);\n        });\n};\n\n// Post a new list of the current user to the DB\nexport const create_list = (appList, listName, category, listDescription, permissions) => {\n    const request = new Request(`${API_HOST}/create_list`, {\n        method: \"post\",\n        body: JSON.stringify({\"listName\": listName,\n        \"category\": category,\n        \"listDescription\": listDescription,\n        \"permissions\": permissions\n        }),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            const newList = appList.state.lists.push({\"id\": json._id, \"listName\": json.listName})\n            appList.setState({\n                list: newList\n            })\n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\nexport const get_all_items = (app, listId) => {\n    const url = `${API_HOST}/get_a_list/` +  listId;\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json()\n            }\n        })\n        .then(json =>{\n            app.setState({ ListName: json.listName, ListDescription: json.listDescription, Category: json.category, FoodRank: json.items })\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\n// adds a new item to a list, does not update ranks of other items\nexport const add_item = (app, popUpState, listId) => {\n    const url = `${API_HOST}/add_item/` + listId;\n\n    const request = new Request(url, {\n        method: \"post\",\n        body: JSON.stringify({\n            \"rank\": popUpState.rank,\n            \"foodName\": popUpState.foodName,\n            \"notes\": popUpState.notes\n        }),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n    .then(res => {\n        if (res.status === 200) {\n            return res.json();\n        }\n    })\n    .then(json => {\n              app.setState({\n              FoodRank: json.items.sort(function(a, b){return a.rank-b.rank})\n        })\n        return \"success\"\n    })\n    .catch(error => {\n        console.log(error);\n    });\n}\n\n\n// modify multiple items in a list, used for when an item is added and ranks of other items must be modified\nexport const modify_multiple_items = (app, newItemList, listId) => {\n    const url = `${API_HOST}/modify_item/` + listId;\n    console.log(url)\n    console.log(newItemList)\n\n    let newList;\n\n    newItemList.map(item => {\n        console.log(item._id)\n            const request = new Request(url, {\n                method: \"post\",\n                body: JSON.stringify({\n                    \"rank\": item.rank,\n                    \"foodName\": item.foodName,\n                    \"notes\": item.notes,\n                    \"item_id\": item._id\n                }),\n                headers: {\n                    Accept: \"application/json, text/plain, */*\",\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        \n            fetch(request)\n            .then(res => {\n                if (res.status === 200) {\n                     return res.json();\n                }\n            })\n            .then(json => {\n                console.log(json.items)\n                newList = json.items\n                // app.setState({\n                //     FoodRank: newList\n                // })\n            })\n            .catch(error => {\n                console.log(error);\n            });\n\n    })\n}\n\nexport const delete_list = (listId) => {\n    const request = new Request(`${API_HOST}/delete_list/` + listId, {\n        method: \"delete\",\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            \n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\nexport const update_list_description = (listId, newDescription) => {\n    const request = new Request(`${API_HOST}/edit_description/` + listId, {\n        method: \"post\",\n        body: JSON.stringify({ listDescription: newDescription}),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            \n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\nexport const delete_item = (listId, itemId) => {\n    const request = new Request(`${API_HOST}/delete_item/` + listId + '/' + itemId, {\n        method: \"delete\",\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\nexport const edit_item = (listId, itemId, newName, newDescription) => {\n    const request = new Request(`${API_HOST}/modify_item/` + listId + '/' + itemId, {\n        method: \"post\",\n        body: JSON.stringify({ foodName: newName, notes: newDescription}),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            \n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}"]},"metadata":{},"sourceType":"module"}