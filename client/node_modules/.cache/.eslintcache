[{"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/index.js":"1","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/reportWebVitals.js":"2","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/App.js":"3","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Login.js":"4","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Signup.js":"5","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/AllUsers.js":"6","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/profile.js":"7","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Main.js":"8","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/IndividualList.js":"9","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Setting.js":"10","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Friends.js":"11","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Home.js":"12","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/MainAdmin.js":"13","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Search.js":"14","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Chart.js":"15","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/auth.js":"16","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/session.js":"17","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/config.js":"18","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/myList.js":"19","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/friend.js":"20","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/search.js":"21","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/popular.js":"22","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/NavigationBar.js":"23","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/all_users.js":"24","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Logout.js":"25","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/profile.js":"26"},{"size":500,"mtime":1635391628857,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1635391628858,"results":"29","hashOfConfig":"28"},{"size":5397,"mtime":1638992562399,"results":"30","hashOfConfig":"28"},{"size":6501,"mtime":1638989142957,"results":"31","hashOfConfig":"28"},{"size":830,"mtime":1635391628857,"results":"32","hashOfConfig":"28"},{"size":3221,"mtime":1639009035150,"results":"33","hashOfConfig":"28"},{"size":9896,"mtime":1638993768376,"results":"34","hashOfConfig":"28"},{"size":6640,"mtime":1638919333772,"results":"35","hashOfConfig":"28"},{"size":19771,"mtime":1639027743877,"results":"36","hashOfConfig":"28"},{"size":5023,"mtime":1638833890321,"results":"37","hashOfConfig":"28"},{"size":6404,"mtime":1639027743876,"results":"38","hashOfConfig":"28"},{"size":376,"mtime":1636339678580,"results":"39","hashOfConfig":"28"},{"size":6171,"mtime":1638782309684,"results":"40","hashOfConfig":"28"},{"size":4003,"mtime":1639030840540,"results":"41","hashOfConfig":"28"},{"size":2311,"mtime":1638919864244,"results":"42","hashOfConfig":"28"},{"size":686,"mtime":1638875219368,"results":"43","hashOfConfig":"28"},{"size":2028,"mtime":1638993875245,"results":"44","hashOfConfig":"28"},{"size":769,"mtime":1638636762734,"results":"45","hashOfConfig":"28"},{"size":6891,"mtime":1638914719951,"results":"46","hashOfConfig":"28"},{"size":4736,"mtime":1638941627508,"results":"47","hashOfConfig":"28"},{"size":957,"mtime":1638933893429,"results":"48","hashOfConfig":"28"},{"size":2238,"mtime":1638774786124,"results":"49","hashOfConfig":"28"},{"size":1867,"mtime":1639034880999,"results":"50","hashOfConfig":"28"},{"size":1025,"mtime":1638826021618,"results":"51","hashOfConfig":"28"},{"size":290,"mtime":1638832858899,"results":"52","hashOfConfig":"28"},{"size":1203,"mtime":1638907312344,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1xq0flm",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/index.js",[],["112","113"],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/reportWebVitals.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/App.js",["114","115"],"import React from 'react';\nimport { Route, Switch, BrowserRouter} from 'react-router-dom'\nimport './App.css';\nimport Home from './Home'\nimport Login from './Login'\nimport Signup from './Signup'\nimport IndividualList from \"./IndividualList\"\nimport Friends from './Friends'\nimport AllUsers from \"./AllUsers\";\nimport Setting from \"./Setting\";\nimport Main from \"./Main\"\nimport Search from \"./Search\"\nimport Profile from \"./profile\"\nimport Logout from \"./Logout\"\n\nimport { checkSession } from \"./actions/session\";\n\nclass App extends React.Component{\n\n  componentDidMount() {\n    checkSession(this); // sees if a user is logged in\n  }\n  \n  // global state passed down includes the current logged in user and if they are an admin\n  state = {\n    currentUser: null,\n    admin: 'false'\n  }\n\n  render(){\n    const { currentUser, admin } = this.state;\n    return (\n      <BrowserRouter>\n        <Switch>\n    \n            <Route\n                    exact path={[\"/setting\"] /* any of these URLs are accepted. */ }\n                    render={ props => (\n                        <div className=\"app\">\n                            { /* Different componenets rendered depending on if someone is logged in. */}\n                            {!currentUser ? <Login {...props} app={this} /> : <Setting {...props} app={this} />}\n                        </div>                   // ... spread operator - provides all of the props in the props object\n                            \n                    )}\n            />\n\n            <Route\n                    exact path={[\"/logout\"] /* any of these URLs are accepted. */ }\n                    render={ props => (\n                        <div className=\"app\">\n                            <Logout {...props} app={this} /> \n                        </div>                   \n                            \n                    )}\n            />\n            <Route\n                    exact path={[\"/friends\"] /* any of these URLs are accepted. */ }\n                    render={ props => (\n                        <div className=\"app\">\n                            { /* Different componenets rendered depending on if someone is logged in. */}\n                            {!currentUser ? <Login {...props} app={this} /> : <Friends {...props} app={this} />}\n                        </div>                   // ... spread operator - provides all of the props in the props object\n                            \n                    )}\n            />\n\n            <Route\n                    exact path={[\"/main\", '/login', '/mainAdmin', '/'] /* any of these URLs are accepted. */ }\n                    render={ props => (\n                        <div className=\"app\">\n                            {!currentUser ? <Login {...props} app={this} /> : <Main {...props} app={this}/>}\n                        </div>                   \n                            \n                    )}\n            />\n\n            <Route\n                    exact path={[\"/individualList\"] /* any of these URLs are accepted. */ }\n                    render={ props => (\n                        <div className=\"app\">\n                            { /* Different componenets rendered depending on if someone is logged in. */}\n                            {!currentUser ? <Login {...props} app={this} /> : <IndividualList {...props} app={this} />}\n                        </div>                   // ... spread operator - provides all of the props in the props object\n                            \n                    )}\n            />\n            <Route\n                    exact path={[\"/allUsers\"] /* any of these URLs are accepted. */ }\n                    render={ props => (\n                        <div className=\"app\">\n                            { /* Different componenets rendered depending on if someone is logged in. */}\n                            {(!currentUser || ! admin) ? <Login {...props} app={this} /> : <AllUsers {...props} app={this} />}\n                        </div>                   // ... spread operator - provides all of the props in the props object\n                            \n                    )}\n            />\n\n            <Route\n                    exact path={[\"/search\"] /* any of these URLs are accepted. */ }\n                    render={ props => (\n                        <div className=\"app\">\n                            { /* Different componenets rendered depending on if someone is logged in. */}\n                            {!currentUser ? <Login {...props} app={this} /> : <Search {...props} app={this} />}\n                        </div>                   // ... spread operator - provides all of the props in the props object\n                            \n                    )}\n            />\n            <Route\n                    exact path={[\"/profile\"] /* any of these URLs are accepted. */ }\n                    render={ props => (\n                        <div className=\"app\">\n                            { /* Different componenets rendered depending on if someone is logged in. */}\n                            {!currentUser ? <Login {...props} app={this} /> : <Profile {...props} app={this} />}\n                        </div>                   // ... spread operator - provides all of the props in the props object\n                            \n                    )}\n            />        \n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Login.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Signup.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/AllUsers.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/profile.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Main.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/IndividualList.js",["116","117","118","119"],"import \"./IndividualFriendsUserSetting.css\";\nimport {uid} from 'react-uid';\n// import {Link} from \"react-router-dom\";\nimport watermelon from './Stickers/watermelon.png'\nimport donut from './Stickers/donut.png'\nimport pie from './Stickers/pie.png'\nimport broccoli from './Stickers/brocoli.png'\nimport React from \"react\";\nimport NavigationBar from './NavigationBar'\nimport { add_item, delete_list, get_all_items, delete_item, edit_item, update_list_description } from \"./actions/myList\";\nclass IndividualList extends React.Component{\n\n    state = {\n        ListName: \"\",\n        Category: \"\",\n        ListDescription: \"\",\n        FoodRank: [],\n        seen: false,\n        seen2: false,\n        seen3: false,\n        info: {},\n        stickers: [{id:0, source: watermelon}, {id: 1, source: donut}, {id:2, source: pie}, {id: 3, source: broccoli}],\n        freeStickers: [],\n        selectedImage : null,\n        user: null\n    }\n\n    componentDidMount(props){\n        const { listId, user } = this.props.location.state\n        this.state.listId = listId\n        this.state.user = user //if user = visitor, do not show add item, delete item, edit description, edit item, etc buttons. If user = me, show buttons\n        console.log(this.state.user)\n        get_all_items (this, listId)\n    }\n\n    ListDescription(){\n        return(\n            <div id='ListDescription'>\n                <h2>List Description</h2>\n                <p>{this.state.ListDescription}</p>\n            </div>\n        )\n    }\n\n    removeFoodRank = (Info) => {\n\n        delete_item(this.state.listId, Info._id).then(response =>{\n            let filterFoodRank = this.state.FoodRank.filter(\n                (check) =>{\n                    return check !== Info\n                }\n            )\n    \n            filterFoodRank.map((R, index)=> R.Rank = index + 1)\n    \n            this.setState(\n                {\n                    FoodRank: filterFoodRank\n                }\n            )\n        })\n\n    }\n\n    deleteWholeList = ()=>{\n        delete_list(this.state.listId).then(response =>{\n            if(response === \"success\"){\n                alert(\"List deleted!\")\n                this.props.history.push('/main')\n            }\n        })\n    }\n\n    OpenClose =()=>{\n        this.setState({\n            seen: !this.state.seen\n        })\n    }\n\n    OpenClose2 =()=>{\n        this.setState({\n            seen2: !this.state.seen2\n        })\n    }\n\n    OpenClose3 =()=>{\n        this.setState({\n            seen3: !this.state.seen3\n        })\n    }\n\n    editItem = (PopUpState, item_id)=>{\n        const foodName = PopUpState.FoodName\n        const notes = PopUpState.Notes\n        const rank = PopUpState.Rank\n\n        let filterFoodRank = this.state.FoodRank.filter(\n            (check) =>{\n                return check.Rank !== rank\n            }\n        )\n\n        const editedItem = {\n            Rank: rank,\n            FoodName: foodName,\n            Notes: notes\n        }\n\n        edit_item(this, this.state.listId, item_id, foodName, notes)\n\n        this.OpenClose2()\n\n\n    }\n\n    addNewItem = async (PopUpState)=>{\n        const foodName = PopUpState.FoodName\n        let rank = PopUpState.Rank\n        \n        // Basic error handling\n        if (PopUpState.FoodName === \"\" || PopUpState.Rank === \"\" || PopUpState.Note === \"\"){\n            alert(\"Please input a value for all fields\")\n            return\n        }\n\n        // Max, please check if rank is integer. Im too lazy to google it. Thanks. The below didnt work. strings ew\n        // if (!Number.isInteger(PopUpState.Rank)){\n        //     alert(\"Please input an integer as the rank\")\n        //     return\n        // }\n\n        if (!parseInt(PopUpState.Rank)){\n            alert(\"Please input an integer as the rank\")\n            return\n        }\n\n\n        if (PopUpState.Rank < 1){\n            alert(\"Please enter an integer for rank greater than 0\")\n            return\n        }\n\n        // rank greater than  MAX rank in current list\n        if (this.state.FoodRank.length === 0){\n\n        }\n        else if(rank > this.state.FoodRank[this.state.FoodRank.length - 1].rank){\n            rank = this.state.FoodRank[this.state.FoodRank.length - 1].rank + 1\n        }\n\n        const note = PopUpState.Note\n        const newItem = {\n            rank: rank,\n            foodName: foodName,\n            notes: note\n        }\n\n        // Add new item and update current FoodRank\n        await add_item(this, newItem, this.state.listId)\n\n        this.OpenClose()\n    }\n\n    editDescription = (description) => {\n        update_list_description(this.state.listId, description).then(res =>{\n            this.setState(\n                {\n                    ListDescription: description\n                }\n            )\n        })\n        this.OpenClose3()\n    }\n\n    Header(){\n        return(\n            <div id='HeaderIndividualList'>\n                <NavigationBar app = {this.props.app} history = {this.props.history}/>\n                <h1>{this.state.ListName + \"(\" + this.state.Category + \")\"}</h1>\n                {this.state.user === \"me\" ? <button type=\"button\" id='AddNewItem' onClick={this.OpenClose}> Add a new list item</button> : null}\n                {/*<button type=\"button\" className='AddNewItem' onClick={this.OpenClose}> Add a new list item</button>*/}\n                {this.state.seen ? <NewRankPopup addNewItem={this.addNewItem} OpenClose={this.OpenClose} /> : null}\n                {this.state.seen2 ? <EditRankPopup OpenClose={this.OpenClose2} Info= {this.state.info}\n                                                   editItem={this.editItem}\n                /> : null}\n                {this.state.seen3 ? <EditDescription editDescription={this.editDescription} OpenClose={this.OpenClose3}\n                                                     Description = {this.state.ListDescription}\n                /> : null}\n                <span className='EmptySpace'> </span>\n                {this.state.user === \"me\" ? <button type=\"button\" id='DeleteWholeList' onClick={this.deleteWholeList}> Delete the whole list </button> : null}\n                {/*<button type=\"button\" className='DeleteWholeList' onClick={this.deleteWholeList}> Delete the whole list </button>*/}\n                <span className='EmptySpace'> </span>\n                {this.state.user === \"me\" ? <button type=\"button\" id='EditDescription' onClick={(this.OpenClose3)}> Edit Description </button> : null}\n                {/*<button type=\"button\" className='EditDescription' onClick={(this.OpenClose3)}> Edit Description </button>*/}\n\n            </div>\n        )\n    }\n\n\n    changeEditingRank = (Info)=> {\n        this.setState(\n            {\n                info: Info\n            }\n        )\n        this.OpenClose2()\n    }\n\n    TableRow(info){\n        return(\n            <tr key={uid(info)}>\n                <td className={\"RankRow\"}>\n                    <strong>{info.rank}</strong>\n                </td>\n                <td>\n                    <div className={\"NameRow\"}>\n                        <strong>{info.foodName}</strong>\n                    </div>\n                </td>\n                <td>\n                    <div className={\"NoteRow\"}>\n                        {info.notes}\n                    </div>\n                </td>\n                {\n                    this.state.user === \"me\" ?\n                        <td className={\"EditRow\"}>\n                            <button type=\"button\" className='editIndividualList'\n                                    onClick={() => this.changeEditingRank(info)}\n                            > edit </button>\n                        </td> : null\n                }\n                {\n                    this.state.user === \"me\" ?\n                        <td className={\"DeleteRow\"}>\n                            <button type=\"button\" className='deleteIndividualList'\n                                    onClick = {\n                                        () => this.removeFoodRank(info)\n                                    }\n                            > delete </button>\n                        </td> : null\n                }\n                {/*<td>*/}\n                {/*    <button type=\"button\" className='editIndividualList'*/}\n                {/*            onClick={() => this.changeEditingRank(info)}*/}\n                {/*    > edit </button>*/}\n                {/*</td>*/}\n                {/*<td>*/}\n                {/*    <button type=\"button\" className='deleteIndividualList'*/}\n                {/*            onClick = {*/}\n                {/*                () => this.removeFoodRank(info)*/}\n                {/*            }*/}\n                {/*    > delete </button>*/}\n                {/*</td>*/}\n            </tr>\n        )\n    }\n\n\n    Table(){\n        return(\n            <table>\n                <tbody>\n                <tr>\n                    <th>Rank</th>\n                    <th>FoodName</th>\n                    <th>Notes</th>\n                    {this.state.user === \"me\" ?  <th>Edit</th>: null}\n                    {/*<th>Edit</th>*/}\n                    {this.state.user === \"me\" ?  <th>Delete</th>: null}\n                    {/*<th>Delete</th>*/}\n                </tr>\n                {this.state.FoodRank.map(info => {return this.TableRow(info)})}\n                </tbody>\n            </table>\n        )\n    }\n\n\n\n\n    // deleteFreeSticker(id){\n    //     console.log(\"Deleteing\")\n    //     const freeStickers = this.state.freeStickers\n    //     let filtered = freeStickers.filter(fs => fs.id.toString() !== id)\n    //     console.log(filtered)\n    //     this.setState({\n    //         freeStickers: filtered\n    //     })\n    // }\n    //\n    //\n    //\n    // click = (event)=>{\n    //     const target = event.target\n    //     const type = target.type\n    //     const className = target.className\n    //\n    //     if(className === 'freeSticker'){\n    //         const targetID = target.id\n    //         this.deleteFreeSticker(targetID)\n    //     }\n    //\n    //     if (type !== 'button' && this.state.selectedImage != null && className !== 'sticker'){\n    //         let x = event.clientX\n    //         let y = event.clientY\n    //         const length = this.state.freeStickers.length\n    //         let ID = 0\n    //         if (length !== 0){\n    //             ID = this.state.freeStickers[length - 1].id + 1\n    //         }\n    //         const freeSticker = {\n    //             id: ID,\n    //             location: [x, y],\n    //             source: this.state.selectedImage\n    //         }\n    //         let existingFreeStickers = this.state.freeStickers\n    //         existingFreeStickers.push(freeSticker)\n    //         this.setState({\n    //             freeStickers: existingFreeStickers,\n    //             selectedImage: null\n    //\n    //         })\n    //\n    //     }\n    // }\n    //\n    // freeSticker(fs) {\n    //     const id = fs.id\n    //     const stringID = id.toString()\n    //     const source = fs.source\n    //     const x = fs.location[0]\n    //     const y = fs.location[1]\n    //     let left = (x - 25)+ 'px';\n    //     let top = (y - 25) + 'px';\n    //     let sticker = document.createElement(\"IMG\");\n    //     sticker.src =source\n    //     sticker.alt = \"iamge not found\"\n    //     sticker.key = uid(fs)\n    //     sticker.id = stringID\n    //     sticker.className = 'freeSticker'\n    //     sticker.style.left = left\n    //     sticker.style.top = top\n    //     sticker.style.position = \"absolute\"\n    //\n    //     return (\n    //         ReactHtmlParser(sticker.outerHTML)\n    //     )\n    //\n    // }\n    //\n    // FreeStickers(){\n    //     const freeStickers = this.state.freeStickers\n    //     return(\n    //             <div>\n    //                 { freeStickers.map(fs => this.freeSticker(fs))}\n    //             </div>\n    //\n    //\n    //             )\n    // }\n    //\n    // selectImage= (event)=> {\n    //     event.preventDefault()\n    //     console.log(\"I am selecting a sticker\")\n    //     const target = event.target\n    //     const source = target.src\n    //     console.log(source)\n    //     this.setState({\n    //         selectedImage: source\n    //     })\n    //\n    //\n    // }\n    //\n    // sticker(s){\n    //\n    //     return(\n    //         <div className='stickerDiv' key={uid(s)}>\n    //             <img src={this.state.stickers[s.id].source } alt='No image'  className='sticker'\n    //                  onClick={this.selectImage}/>\n    //             <span className='EmptySpace'> </span>\n    //         </div>\n    //\n    //     )\n    // }\n    //\n    //\n    //\n    //\n    //\n    // StickerList(){\n    //     return(\n    //         <div className='stickerList'>\n    //             {this.state.stickers.map(s => this.sticker(s))}\n    //\n    //         </div>\n    //\n    //     )\n    // }\n    //\n    //\n    //\n    // StickerPanel(){\n    //     return(\n    //         <div className='StickerPanel'>\n    //             <h2> Choose Your Stickers</h2>\n    //             <p> Choose by clicking the image and the position that the sticker should go and deleting by clicking again</p>\n    //             {this.StickerList()}\n    //             <p>Stickers can only go to the header, List Description, item table and sticker panel</p>\n    //         </div>\n    //     )\n    // }\n\n\n\n    render() {\n        return(\n            <div onClick={this.click}>\n                {/*<Link to={'/Main'}>*/}\n                {/*    <div><button className='back'>Back</button></div>*/}\n                {/*</Link>*/}\n                {this.Header()}\n                <br/>\n\n                {this.Table()}\n                {this.ListDescription()}\n                {/*{this.StickerPanel()}*/}\n                {/*{this.FreeStickers()}*/}\n\n            </div>\n        )\n    }\n}\n\nclass NewRankPopup extends React.Component{\n    state = {\n        FoodName: \"\",\n        Rank: \"\",\n        Note: \"\"\n    }\n\n    handleChange = (event) => {\n        const target = event.target\n        const value = target.value\n        const name = target.name\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    FoodNameForm(){\n        return(\n            <form className=\"FoodNameForm\">\n                <label>\n                    <strong>Food Name:  </strong>\n                    <input type=\"text\" name=\"FoodName\" value = {this.state.FoodName}\n                           onChange={this.handleChange} className=\"FoodNameInputBox\"\n                    />\n                </label>\n            </form>\n        )\n    }\n\n    RankForm(){\n        return(\n            <form className=\"RankForm\">\n                <label>\n                    <strong>{\"Rank:                      \"}</strong>\n                    <input type=\"text\" name=\"Rank\" value = {this.state.rank} className=\"RankInputBox\"\n                           onChange={this.handleChange}\n                    />\n                </label>\n            </form>\n        )\n    }\n    NoteForm(){\n        return(\n            <form className=\"NoteForm\">\n                <label>\n                    <strong>Note:  </strong>\n                    <br/>\n                    <textarea  name=\"Note\" value = {this.state.Note} className=\"NoteInputBox\"\n                               onChange={this.handleChange} rows=\"5\" cols=\"10\" wrap=\"soft\">\n                    </textarea>\n                </label>\n            </form>\n        )\n    }\n\n    Header(){\n        return(\n            <div className=\"PopUpWindowHeader\">\n                <h2>Add a new Item to the list</h2>\n            </div>\n\n        )\n    }\n\n\n\n    render(){\n        return(\n            <div className=\"PopUpWindow\">\n                {this.Header()}\n                <br />\n                {this.FoodNameForm()}\n                <br />\n                {this.RankForm()}\n                <br />\n                {this.NoteForm()}\n                <br />\n                <div className=\"ButtonArray\">\n                    <button type=\"button\" onClick={()=>this.props.addNewItem(this.state)}>submit</button>\n                    <span className='EmptySpace'> </span>\n                    <button type=\"button\" onClick={this.props.OpenClose}> Cancel </button>\n                </div>\n\n            </div>\n    )\n    }\n}\n\nclass EditRankPopup extends React.Component{\n    state = {\n        FoodName: this.props.Info.FoodName,\n        Notes: this.props.Info.Notes,\n        Rank: this.props.Info.Rank\n    }\n    handleChange = (event) => {\n        const target = event.target\n        const value = target.value\n        const name = target.name\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    Header(){\n        return(\n            <div className=\"PopUpWindowHeader\">\n                <h2>Edit this item</h2>\n            </div>\n\n        )\n    }\n\n    NoteForm(){\n        return(\n            <form className=\"NoteForm\">\n                <label>\n                    <strong>Note:  </strong>\n                    <br/>\n                    <textarea name=\"Notes\" value = {this.state.Notes} className=\"NoteInputBox\"\n                                          onChange={this.handleChange} rows=\"5\" cols=\"10\" wrap=\"soft\">\n                    </textarea>\n                </label>\n            </form>\n        )\n    }\n\n    FoodNameForm(){\n        return(\n            <form className=\"FoodNameForm\">\n                <label>\n                    <strong>Food Name:  </strong>\n                    <input type=\"text\" name=\"FoodName\" value = {this.state.FoodName}\n                           onChange={this.handleChange} className=\"FoodNameInputBox\"\n                    />\n                </label>\n            </form>\n        )\n    }\n\n    render(){\n        return(\n            <div className=\"PopUpWindow\">\n                {this.Header()}\n                <br />\n                {this.FoodNameForm()}\n                <br />\n                {this.NoteForm()}\n                <br />\n                <div className=\"ButtonArray\">\n                    <button type=\"button\" onClick={()=>this.props.editItem(this.state, this.props.Info._id)}>submit</button>\n                    <span className='EmptySpace'> </span>\n                    <button type=\"button\" onClick={this.props.OpenClose}> Cancel </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass EditDescription extends React.Component{\n    state = {\n        Description: this.props.Description\n    }\n\n    handleChange = (event) => {\n        const target = event.target\n        const value = target.value\n        const name = target.name\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    Header(){\n        return(\n            <div className=\"PopUpWindowHeader\">\n                <h2>Edit List Description</h2>\n            </div>\n        )\n    }\n\n    DescriptionForm(){\n        return(\n            <form className=\"DescriptionForm\">\n                <label>\n                    <strong>New description:  </strong>\n                    <br/>\n                    <br/>\n                    <textarea name=\"Description\" value = {this.state.description}\n                              onChange={this.handleChange} className=\"DescriptionInputBox\" rows=\"5\" cols=\"10\" wrap=\"soft\"> </textarea>\n                </label>\n            </form>\n        )\n    }\n\n    render() {\n        return(\n            <div className=\"PopUpWindow\">\n                {this.Header()}\n                <br />\n                {this.DescriptionForm()}\n                <br />\n                <div className=\"ButtonArray\">\n                    <button type=\"button\" onClick={()=>this.props.editDescription(this.state.Description)}>submit</button>\n                    <span className='EmptySpace'> </span>\n                    <button type=\"button\" onClick={this.props.OpenClose}> Cancel </button>\n                </div>\n            </div>\n        )\n    }\n\n}\n\n\nexport default IndividualList;","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Setting.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Friends.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Home.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/MainAdmin.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Search.js",["120"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './CSS/Search.css'\nimport {uid} from 'react-uid';\nimport {search_by_food, search_by_name} from './actions/search'\nimport NavigationBar from './NavigationBar'\n\nclass Search extends React.Component{\n\n    state = {\n        list:[]\n    }\n\n    render(){\n        return(\n            <div>\n            <NavigationBar app = {this.props.app} history = {this.props.history}/>\n                <br></br><br></br>\n                <strong className=\"searchTitle\">Search For Similar Lists!</strong>\n                <SearchBar app={this}/>\n                <TableResults rows={this.state.list}/>\n                <SearchInstructions rows={this.state.list}/>\n            </div>\n        )\n        \n    }\n}\n\nclass TableResults extends React.Component{\n\n    Row(row){\n        return(\n            <tr key={uid(row)}>\n                <td>\n\n                    <Link to={{\n                                pathname: './IndividualList',\n                                state:{\n                                    listId: row.listId,\n                                    user: 'visitor'\n                                }\n                                }}\n                                >{row.listName}</Link>\n                </td>\n                <td>\n                    <p>{row.listDescript}</p>\n                </td>\n                <td>\n                    <Link to={{\n                                pathname: './profile',\n                                state:{\n                                    edit: false,\n                                    user: row.userId\n                                }\n                                }}\n                                ><p>{row.username}</p>\n                    </Link>\n\n                </td>\n            </tr>\n        )\n    }\n\n\n\n    render(){\n        const { state, rows } = this.props\n        return(\n            <table id = \"tableDiv\">\n                <tbody>\n                <tr>\n                    <th>List Name</th>\n                    <th>List Description</th>\n                    <th>Username</th>\n                </tr>\n                {rows.map(row => {return this.Row(row)})}\n                </tbody>\n            </table>\n        )\n    }\n}\n\n\nclass SearchBar extends React.Component{\n    state = {\n        searchBy: 'list',\n        searchInput: \"\"\n    }\n\n    searchChanged = (event) => {\n        const target = event.target\n        const value = target.value\n        const name = target.name\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    submitRequest = () =>{\n        const { app } = this.props\n\n        if(this.state.searchBy === 'food'){\n            search_by_food(app, this.state.searchInput)\n        }\n        else if(this.state.searchBy === 'list'){\n            search_by_name(app, this.state.searchInput)\n        }\n    }\n\n    render(){\n        return(\n            <form id=\"searchBarForm\">\n                <select name=\"searchBy\" \n                        id=\"dropDownSearch\"\n                        onChange={this.searchChanged}>\n                    <option value=\"list\">List name</option>\n                    <option value=\"food\">Food name</option>\n                </select>\n                <input type=\"text\" id=\"searchBarText\" name=\"searchInput\" onChange={this.searchChanged}></input>\n                <input type=\"button\" id=\"searchBarButton\" value =\"Search\" onClick={this.submitRequest}></input>           \n            </form>\n        \n        )\n    }\n}\n\nclass SearchInstructions extends React.Component{\n    render(){\n        return(\n            <div id=\"searchInstructions\">\n                <p>In the drop down menu, select whether to search by a food item or a list.</p>\n                <p>If you search by a food item, you will be given lists that have that food item in it.</p>\n                <p>If you search by a list name, lists that share as many of the same items will be found.</p>\n            </div>\n        )\n    }\n}\n\n\nexport default Search;","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Chart.js",["121"],"import React from 'react';\nimport {Bar} from 'react-chartjs-2';\nimport { get_popular } from './actions/popular';\n\n\nclass Chart extends React.Component {\n  constructor(props){  \n    super(props);\n  }\n\n  state = {\n    options: {\n      plugins:{   \n         legend: {\n           display: false\n                 }\n      },     \n    },\n    dish: {\n      labels: [],\n      datasets: [\n      {\n        label: 'Top 3 Popular Dishes',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n      ]\n    },\n    beverage: {\n      labels: [],\n      datasets: [\n      {\n        label: 'Top 3 Popular Beverages',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n      ]\n    },\n    ingredient: {\n      labels: [],\n      datasets: [\n      {\n        label: 'Top 3 Popular Ingredients',\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: []\n      }\n      ]\n    }\n  };\n  \n  componentDidMount = () => {\n    /*\n      Make GET request to obtain information for top three most popular foods \n      by category. Will store in this state. \n    */\n      get_popular(this, \"dishes\")\n      get_popular(this, \"beverages\")\n      get_popular(this, \"ingredients\")\n      \n  }\n\n  render() {\n    const { option } = this.props;\n    const titleEnding = (option === \"dish\") ? 'es' : 's'\n    \n    return (\n      <div>\n        <Bar\n          data={this.state[option]}\n          options={{\n            scales: {\n              y: {\n                title: {\n                  display: true,\n                  text: 'Frequency Across All Lists',\n                  font: {\n                    size: 15\n                  }\n                }\n                }\n              }, \n            plugins: {\n              title:{\n                display:true,\n                text:'Top 3 Most Popular ' + option.charAt(0).toUpperCase() + option.slice(1) + titleEnding + \" of All Users\",\n                font: {\n                  size: 20\n                }\n              },\n              legend: {\n                display: false,\n              },\n          },\n          }}\n        />\n      </div>\n    );\n  }\n}\nexport default Chart;","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/auth.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/session.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/config.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/myList.js",["122","123"],"import ENV from './../config.js'\nconst API_HOST = ENV.api_host\n\n// Get all list ids and names of currently logged in user\nexport const get_all_lists= (app) => {\n    const url = `${API_HOST}/get_all_lists`;\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json()\n            }\n        })\n        .then(json =>{\n            app.setState({lists: json})\n        })\n        .catch(error => {\n            app.setState({lists: []})\n            console.log(error);\n        });\n};\n\n// Post a new list of the current user to the DB\nexport const create_list = (appList, listName, category, listDescription, permissions) => {\n    const request = new Request(`${API_HOST}/create_list`, {\n        method: \"post\",\n        body: JSON.stringify({\"listName\": listName,\n        \"category\": category,\n        \"listDescription\": listDescription,\n        \"permissions\": permissions\n        }),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            const newList = appList.state.lists.push({\"id\": json._id, \"listName\": json.listName})\n            appList.setState({\n                list: newList\n            })\n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\nexport const get_all_items = (app, listId) => {\n    const url = `${API_HOST}/get_a_list/` +  listId;\n    fetch(url)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json()\n            }\n        })\n        .then(json =>{\n            app.setState({\n                ListName: json.listName,\n                ListDescription: json.listDescription,\n                Category: json.category,\n                FoodRank: json.items\n            })\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\n// adds a new item to a list, does not update ranks of other items\nexport const add_item = (app, popUpState, listId) => {\n    const url = `${API_HOST}/add_item/` + listId;\n\n    const request = new Request(url, {\n        method: \"post\",\n        body: JSON.stringify({\n            \"rank\": popUpState.rank,\n            \"foodName\": popUpState.foodName,\n            \"notes\": popUpState.notes\n        }),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n    .then(res => {\n        if (res.status === 200) {\n            return res.json();\n        }\n    })\n    .then(json => {\n              app.setState({\n              FoodRank: json.items.sort(function(a, b){return a.rank-b.rank})\n        })\n        return \"success\"\n    })\n    .catch(error => {\n        console.log(error);\n    });\n}\n\n\n// modify multiple items in a list, used for when an item is added and ranks of other items must be modified\nexport const modify_multiple_items = (app, newItemList, listId) => {\n    const url = `${API_HOST}/modify_item/` + listId;\n    console.log(url)\n    console.log(newItemList)\n\n    let newList;\n\n    newItemList.map(item => {\n        console.log(item._id)\n            const request = new Request(url, {\n                method: \"post\",\n                body: JSON.stringify({\n                    \"rank\": item.rank,\n                    \"foodName\": item.foodName,\n                    \"notes\": item.notes,\n                    \"item_id\": item._id\n                }),\n                headers: {\n                    Accept: \"application/json, text/plain, */*\",\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        \n            fetch(request)\n            .then(res => {\n                if (res.status === 200) {\n                     return res.json();\n                }\n            })\n            .then(json => {\n                console.log(json.items)\n                newList = json.items\n                // app.setState({\n                //     FoodRank: newList\n                // })\n            })\n            .catch(error => {\n                console.log(error);\n            });\n\n    })\n}\n\nexport const delete_list = (listId) => {\n    const request = new Request(`${API_HOST}/delete_list/` + listId, {\n        method: \"delete\",\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            \n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\nexport const update_list_description = (listId, newDescription) => {\n    const request = new Request(`${API_HOST}/edit_description/` + listId, {\n        method: \"post\",\n        body: JSON.stringify({ listDescription: newDescription}),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            \n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\nexport const delete_item = (listId, itemId) => {\n    const request = new Request(`${API_HOST}/delete_item/` + listId + '/' + itemId, {\n        method: \"delete\",\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}\n\nexport const edit_item = (app, listId, itemId, newName, newDescription) => {\n    const request = new Request(`${API_HOST}/modify_item/` + listId + '/' + itemId, {\n        method: \"post\",\n        body: JSON.stringify({ foodName: newName, notes: newDescription}),\n        headers: {\n            Accept: \"application/json, text/plain, */*\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    return fetch(request)\n        .then(res => {\n            if (res.status === 200) {\n                return res.json();\n            }\n        })\n        .then(json => {\n            app.setState({FoodRank: json.items})\n            return \"success\"\n        })\n        .catch(error => {\n            console.log(error);\n        });\n}","/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/friend.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/search.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/popular.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/NavigationBar.js",["124"],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/all_users.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/Logout.js",[],"/Users/valeriewirianto/University Stuff/309/Group/team50/client/src/actions/profile.js",[],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":4,"column":8,"nodeType":"131","messageId":"132","endLine":4,"endColumn":12},{"ruleId":"129","severity":1,"message":"133","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":30,"column":9,"nodeType":"136","messageId":"137","endLine":30,"endColumn":19},{"ruleId":"134","severity":1,"message":"135","line":31,"column":9,"nodeType":"136","messageId":"137","endLine":31,"endColumn":19},{"ruleId":"129","severity":1,"message":"138","line":97,"column":13,"nodeType":"131","messageId":"132","endLine":97,"endColumn":27},{"ruleId":"129","severity":1,"message":"139","line":103,"column":15,"nodeType":"131","messageId":"132","endLine":103,"endColumn":25},{"ruleId":"129","severity":1,"message":"140","line":67,"column":17,"nodeType":"131","messageId":"132","endLine":67,"endColumn":22},{"ruleId":"141","severity":1,"message":"142","line":7,"column":3,"nodeType":"143","messageId":"144","endLine":9,"endColumn":4},{"ruleId":"129","severity":1,"message":"145","line":117,"column":9,"nodeType":"131","messageId":"132","endLine":117,"endColumn":16},{"ruleId":"146","severity":1,"message":"147","line":119,"column":26,"nodeType":"148","messageId":"149","endLine":119,"endColumn":28},{"ruleId":"141","severity":1,"message":"142","line":8,"column":5,"nodeType":"143","messageId":"144","endLine":10,"endColumn":6},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'Signup' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'filterFoodRank' is assigned a value but never used.","'editedItem' is assigned a value but never used.","'state' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'newList' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]